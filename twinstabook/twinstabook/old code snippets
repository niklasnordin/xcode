
- (IBAction)updateButtonClicked:(id)sender
{
    //self.textView.text = @"";
    [self.feedArray removeAllObjects];
    
    if (self.database.useFacebook)
    {
        FBSession *session = [FBSession activeSession];

        if (session.isOpen)
        {
            NSLog(@"FB session is open");
            //FBAccessTokenData *data = FBSession.activeSession.accessTokenData;
            //NSLog(@"permissions = %@",data.permissions);
        }
        else
        {
            NSLog(@"FB session is NOT open");
            return;
        }
        FBRequestConnection* conn = [[FBRequestConnection alloc] init];
        NSString *startPage = @"/me/feed";
        //NSString *startPage = @"search?q=max&type=user";
        [self readSession:session fromConnection:conn fromPage:startPage];

        
    } // end useFacebook
    
    if (self.database.useInstagram)
    {
        
    } // end useInstagram
    
    if (self.database.useTwitter)
    {
        
    } // end useTwitter
}

    if (![vc isKindOfClass:[ twinstabookFirstViewController class]])
    {
        // only allowed at this point to call this from the first view controller
        NSLog(@"you are calling this from wrong UIViewController %@",[vc class]);
        return;
    }
    twinstabookFirstViewController *tvc = (twinstabookFirstViewController *)vc;
    
    
    
    
    
    
    
    
/*
// Override to support conditional editing of the table view.
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
    // Return NO if you do not want the specified item to be editable.
    return YES;
}
*/

/*
// Override to support editing the table view.
- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        // Delete the row from the data source
        [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
    }   
    else if (editingStyle == UITableViewCellEditingStyleInsert) {
        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
    }   
}
*/

/*
// Override to support rearranging the table view.
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath
{
}
*/

/*
// Override to support conditional rearranging of the table view.
- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath
{
    // Return NO if you do not want the item to be re-orderable.
    return YES;
}
*/

/*
#pragma mark - Navigation

// In a story board-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}

 */
 
 
 
    
    // This is the old way to load the friends
    if ([[FBSession activeSession] isOpen])
    {
        
        FBRequest* friendsRequest = [FBRequest requestForMyFriends];
        
        [friendsRequest startWithCompletionHandler: ^(FBRequestConnection *connection,
                                                      NSDictionary* result,
                                                      NSError *error)
         {
             if (error)
             {
                 NSLog(@"error = %@",error);
             }
             else
                 
             {
                 
                 NSArray* friends = [result objectForKey:@"data"];
                 //FBGraphObject *paging = [result objectForKey:@"paging"];
                 
                 //NSString *previous = [paging objectForKey:@"previous"];
                 // keys
                 // first_name, id, last_name, name, username
                 NSLog(@"Found: %ld friends", friends.count);
                 
                 if ([friends count])
                 {
                     [self.facebookFriends removeAllObjects];
                     [self.facebookFriends addObjectsFromArray:friends];
                 }
                 
                 //NSLog(@"result = %@",result);
                 //NSString *next = [paging objectForKey:@"next"];
                 //if (next)
                 {
                     //NSLog(@"next");
                     //[self readURLAsync:next fromConnection:connection];
                 }
                 /*
                  for (NSDictionary<FBGraphUser>* friend in friends)
                  {
                  NSLog(@"I have a friend named %@ with id %@", friend.name, friend.id);
                  }
                  */
             }
         }];
    }
    else
    {
        NSLog(@"session is not open");
    }
    


#pragma mark - FBLoginViewDelegate

- (void)loginViewShowingLoggedInUser:(FBLoginView *)loginView
{
    // this is called when you have logged in
    // first get the buttons set for login mode
    //self.buttonPostPhoto.enabled = YES;
    // "Post Status" available when logged on and potentially when logged off.  Differentiate in the label.
    //[self.buttonPostStatus setTitle:@"Post Status Update (Logged On)" forState:self.buttonPostStatus.state];
    //NSLog(@"loginViewShowingLoggedInUser");
}

- (void)loginViewFetchedUserInfo:(FBLoginView *)loginView
                            user:(id<FBGraphUser>)user
{
    //NSLog(@"loginViewFetchUserInfo");
}

- (void)loginViewShowingLoggedOutUser:(FBLoginView *)loginView
{
    // this is called after you have logged out
    //NSLog(@"loginViewShowingLoggedOutUser");
}


- (void)loginView:(FBLoginView *)loginView handleError:(NSError *)error
{
    // see https://developers.facebook.com/docs/reference/api/errors/ for general guidance on error handling for Facebook API
    // our policy here is to let the login view handle errors, but to log the results
    NSLog(@"FBLoginView encountered an error=%@", error);
}

 /*
    NSLog(@"indexPath = %@",indexPath);
    static NSString *CellIdentifier = @"Cell";
    NSTextAlignment alignment = NSTextAlignmentLeft;
    UIImage *image = nil;
    
    switch ( indexPath.section)
    {
        case 0:
            CellIdentifier = @"Feed";
            alignment = NSTextAlignmentCenter;
            break;
            
        case 1:
            switch ( indexPath.row )
            {
                case 0:
                    CellIdentifier = @"Facebook";
                    image = self.database.facebookLogo;
                    break;
                
                case 1:
                    CellIdentifier = @"Twitter";
                    image = self.database.twitterLogo;
                    break;
                
                case 2:
                    CellIdentifier = @"Instagram";
                    image = self.database.instagramLogo;
                    break;
            }
            break;
            
        case 2:
            CellIdentifier = @"Groups";
            alignment = NSTextAlignmentCenter;
            break;
            
        default:
            break;
    }
*/
    //NSLog(@"hey: %@",CellIdentifier);

    